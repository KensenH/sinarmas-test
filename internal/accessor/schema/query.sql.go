// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package schema

import (
	"context"
)

const getAllItems = `-- name: GetAllItems :many
SELECT id, name, description FROM items
ORDER BY name
`

func (q *Queries) GetAllItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, getAllItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO items (
  name, description
) VALUES (
  $1, $2
)
RETURNING id, name, description
`

type InsertItemParams struct {
	Name        string
	Description string
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, insertItem, arg.Name, arg.Description)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
